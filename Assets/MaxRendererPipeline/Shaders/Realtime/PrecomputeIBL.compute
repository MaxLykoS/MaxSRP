#pragma kernel PrecomputeDiffuse
#pragma kernel PrecomputeSpec
#pragma kernel PrecomputeBRDFLut

#define PI 3.1415926535897931

// ********************* Common *********************
// radiance map input
TextureCube _RadianceMap;
SamplerState _Sampler_LinearClamp;
uint _Width;
uint _Face;
uint _TexelCountsPerFace;

// output
RWStructuredBuffer<float4> _Result;

// ********************* PrecomputeDiffuse *********************
//Texture format is RGBA SFloat, so we do not need to decode sampleHDR
float3 SampleCubeMap(TextureCube cubTex, float3 sampleDir)
{
    float4 sampleHDR = cubTex.SampleLevel(_Sampler_LinearClamp, sampleDir, 0);  // always sample 0
    return sampleHDR.rgb;
}

float3 DirectionFromCubemapTexel(int face, float u, float v)
{
    float3 dir = float3(0, 0, 0);

    switch (face)
    {
    case 0: //+X
        dir.x = 1;
        dir.y = v * -2.0f + 1.0f;
        dir.z = u * -2.0f + 1.0f;
        break;

    case 1: //-X
        dir.x = -1;
        dir.y = v * -2.0f + 1.0f;
        dir.z = u * 2.0f - 1.0f;
        break;

    case 2: //+Y
        dir.x = u * 2.0f - 1.0f;
        dir.y = 1.0f;
        dir.z = v * 2.0f - 1.0f;
        break;

    case 3: //-Y
        dir.x = u * 2.0f - 1.0f;
        dir.y = -1.0f;
        dir.z = v * -2.0f + 1.0f;
        break;

    case 4: //+Z
        dir.x = u * 2.0f - 1.0f;
        dir.y = v * -2.0f + 1.0f;
        dir.z = 1;
        break;

    case 5: //-Z
        dir.x = u * -2.0f + 1.0f;
        dir.y = v * -2.0f + 1.0f;
        dir.z = -1;
        break;
    }

    return normalize(dir);
}

[numthreads(32,1,1)]
void PrecomputeDiffuse(uint3 id : SV_DispatchThreadID)
{
    uint texel = id.x;

    if (texel > _TexelCountsPerFace)
        return;

    float3 result = float3(0, 0, 0);

    float u = (texel % _Width) / (float)_Width;
    float v = ((int)(texel / _Width)) / (float)_Width;

    //get the direction vector
    float3 N = DirectionFromCubemapTexel(_Face, u, v);
    N = normalize(N);

    float3 up = float3(0, 1, 0);
    float3 right = cross(up, N);
    up = cross(N, right); 

    float sampleDelta = 0.025f;
    float nrSamples = 0.0f;

    for (float phi = 0.0f; phi < 2.0 * PI; phi += sampleDelta)
    {
        for (float theta = 0.0f; theta < 0.5 * PI; theta += sampleDelta)
        {
            // spherical to cartesian (in tangent space)
            float3 tangentSample = float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            // tangent space to world
            float3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;

            result = result + SampleCubeMap(_RadianceMap, sampleVec) * cos(theta) * sin(theta);
            nrSamples++;
        }
    }
    result = PI * result * (1.0f / nrSamples);
 
    _Result[texel] = float4(result, 1.0);
}

// ********************* PrecomputeSpec *********************
float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float _Roughness;
[numthreads(32, 1, 1)]
void PrecomputeSpec(uint3 id : SV_DispatchThreadID)
{
    uint texel = id.x;

    if (texel > _TexelCountsPerFace)
        return;

    float3 result = float3(0, 0, 0);

    float u = (texel % _Width) / (float)_Width;
    float v = ((int)(texel / _Width)) / (float)_Width;

    //get the direction vector
    float3 N = normalize(DirectionFromCubemapTexel(_Face, u, v));
    float3 R = N;
    float3 V = R;

    const uint SAMPLE_COUNT = 1024u;
    float totalWeight = 0.0;
    float3 prefilteredColor = float3(0, 0, 0);
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, _Roughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            prefilteredColor += SampleCubeMap(_RadianceMap, L) * NdotL;
            totalWeight += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    _Result[texel] = float4(prefilteredColor, 1.0);
}

// ********************* PrecomputeBRDFLut *********************
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
float2 IntegrateBRDF(float NdotV, float roughness)
{
    float3 V;
    V.x = sqrt(1.0 - NdotV * NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    float3 N = float3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024u;
    for (uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0)
        {
            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / ((NdotH * NdotV + 0.00001));
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    return float2(A, B);
}

RWStructuredBuffer<float4> _BRDFLut;

[numthreads(32, 1, 1)]
void PrecomputeBRDFLut(uint3 id : SV_DispatchThreadID)
{
    float width = id.x % (_Width);
    float height = id.x / float(_Width);

    float tx = width / float(_Width); tx = max(0.001, tx);
    float ty = height / float(_Width);

    float2 integratedBRDF = IntegrateBRDF(tx, ty);
    _BRDFLut[id.x] = float4(integratedBRDF, 0, 0);
}